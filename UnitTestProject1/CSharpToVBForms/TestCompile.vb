Imports System.IO
Imports CSharpToVBApp
Imports IVisualBasicCode.CodeConverter
Imports Microsoft.CodeAnalysis
Imports Microsoft.CodeAnalysis.Emit
Imports Xunit
Namespace CSharpToVBAppCSharpToVB
    <TestClass()> Public Class TestCompile
        Private Const RootDirectory As String = "C:\Users\PaulM\Source\Repos\roslyn-PaulCohen\src"
        Private LastFileProcessed As String
        Private Shared Function CountFile(PathWithFileName As String, LanguageExtension As String, DontCare() As MetadataReference) As Boolean
            ' Do not delete the next line or the parameter it is needed by other versions of this routine
            LanguageExtension = ""
            PathWithFileName = ""
            Return True
        End Function

        Private Function ProcessFile(PathWithFileName As String, LanguageExtension As String, OptionalReferences() As MetadataReference) As Boolean
            ' Do not delete the next line or the parameter it is needed by other versions of this routine
            LanguageExtension = ""
            LastFileProcessed = PathWithFileName
            Dim fs As FileStream = File.OpenRead(PathWithFileName)
            Dim RequestToConvert As ConvertRequest = New ConvertRequest With {
                                                            .RequestedConversion = "cs2vb",
                                                            .SourceCode = GetFileTextFromStream(fs)
                                                            }
            If RequestToConvert.SourceCode.Contains({"< autogenerated", "<auto-generated"}, StringComparison.CurrentCultureIgnoreCase) Then
                Return True
            End If
            Dim ResultOfConversion As ConversionResult = ConvertInputRequest(RequestToConvert, If(OptionalReferences Is Nothing, References(), OptionalReferences))
            If ResultOfConversion.Success = False Then
                Return False
            End If
            Dim CompileResult As EmitResult = CompileVisualBasicString(StringToBeCompiler:=ResultOfConversion.ConvertedCode, ErrorsToBeIgnored:=ErrorsToBeIgnored, SeverityToReport:=DiagnosticSeverity.Error, ResultOfConversion:=ResultOfConversion)
            If ResultOfConversion.FilteredListOfFailures.Count > 0 Then
                Throw New ApplicationException($"{PathWithFileName} failed to compile with error :{vbCrLf}{ResultOfConversion.FilteredListOfFailures(0).GetMessage}")
                Return False
            End If
            Return True
        End Function

        <Fact>
        Public Sub ConvertDirectoryCodeStyle()
            Const targetDirectory As String = RootDirectory & "\CodeStyle"

            Dim FilesProcessed As Integer = 0

            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryCompilersCore()
            Const targetDirectory As String = RootDirectory & "\Compilers\Core"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpCSC()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\CSC"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpCSharpAnalyzerDriver()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\CSharpAnalyzerDriver"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Timeout(100000)>
        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpPortable()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\Portable"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpTestCommandLine()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\Test\CommandLine"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpTestDiagnostics()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\Test\"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpTestEmit()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\Test\Emit"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpTestSemantic()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\Test\Semantic"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpTestSymbol()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\Test\Symbol"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpTestSyntax()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\Test\Syntax"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersCSharpTestWinRT()
            Const targetDirectory As String = RootDirectory & "\Compilers\CSharp\Test\WinRT"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersExtension()
            Const targetDirectory As String = RootDirectory & "\Compilers\Extension"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersRealParserTests()
            Const targetDirectory As String = RootDirectory & "\Compilers\RealParserTests"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersServerVBCSCompiler()
            Const targetDirectory As String = RootDirectory & "\Compilers\Server\VBCSCompiler"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersServerVBCSCompilerTests()
            Const targetDirectory As String = RootDirectory & "\Compilers\Server\VBCSCompilerTests"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersShared()
            Const targetDirectory As String = RootDirectory & "\Compilers\Shared"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryCompilersTest()
            Const targetDirectory As String = RootDirectory & "\Compilers\Test"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryCompilersVisualStudio()
            Const targetDirectory As String = RootDirectory & "\Compilers\VisualBasic"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryDependencies()
            Const targetDirectory As String = RootDirectory & "\Dependencies"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryDeployment()
            Const targetDirectory As String = RootDirectory & "\Deployment"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryEditorFeatures()
            Const targetDirectory As String = RootDirectory & "\EditorFeatures"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryExpressionEvaluator()
            Const targetDirectory As String = RootDirectory & "\ExpressionEvaluator"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryFeatures()
            Const targetDirectory As String = RootDirectory & "\Features"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryInteractive()
            Const targetDirectory As String = RootDirectory & "\Interactive"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryNuGet()
            Const targetDirectory As String = RootDirectory & "\NuGet"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub
        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryScripting()
            Const targetDirectory As String = RootDirectory & "\Scripting"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectorySetup()
            Const targetDirectory As String = RootDirectory & "\Setup"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryTest()
            Const targetDirectory As String = RootDirectory & "\Test"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryTools()
            Const targetDirectory As String = RootDirectory & "\Tools"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <Fact>
        Public Sub ConvertDirectoryVisualStudio()
            Const targetDirectory As String = RootDirectory & "\VisualStudio"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub ConvertDirectoryWorkspaces()
            Const targetDirectory As String = RootDirectory & "\Workspaces"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf ProcessFile), $"Failing file {LastFileProcessed}")
        End Sub

        <Fact>
        Public Sub VB_CountAll()
            Const targetDirectory As String = RootDirectory & "\"
            Dim FilesProcessed As Integer = 0
            Assert.True(ProcessDirectory(targetDirectory:=targetDirectory, MeForm:=Nothing, StopButton:=Nothing, RichTextBoxFileList:=Nothing, LastFileNameWithPath:="", LanguageExtension:="cs", FilesProcessed:=FilesProcessed, ProcessFile:=AddressOf CountFile), $"Failing file {LastFileProcessed}")
            Assert.Equal(8109, FilesProcessed)
        End Sub
    End Class
End Namespace
